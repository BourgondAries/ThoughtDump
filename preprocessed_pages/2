Rust. Racket.
<br><br>
I've spent a fair share of my time working with the Racket programming language. Racket is a lisp-1 language that puts much effort into allowing you to define new languages and augment them in your project.
<br>
It's a really neat language and greatly reduces technical debt, but Racket has its downsides: It's slow.
<br><br>
Yes, even running on the machine I bought in the summer of 2016 the garbage collector simply pauses my entire application for 1-3 seconds every minute or two.
<br>
The program is a simple moving and scaling triangle. Even incremental GC doesn't help.
<br>
But I still like Racket. I also like Rust. It's nice. It's safe. It's a good language, but not as powerful as Racket in regards with its macros (until Rust gets procedural macros!).
<br>
What about making a Racket-Rust transpiler in Racket? Thusly augmenting the power of a lisp and the speed of Rust.

Here's an example:
<pre>
#lang rust

[fn main [] [
	[println! "Hello World!"]
]]
</pre>

Would transpile to
<pre>
fn main() {
	println!["Hello World!"];
}
</pre>

Not the perfect example, but it captures the general idea. A good idea?

